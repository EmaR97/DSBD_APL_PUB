// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_command_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_2eproto;
namespace cam_controller {
namespace message {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
}  // namespace message
}  // namespace cam_controller
PROTOBUF_NAMESPACE_OPEN
template<> ::cam_controller::message::Command* Arena::CreateMaybeMessage<::cam_controller::message::Command>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cam_controller {
namespace message {

// ===================================================================

class Command PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cam_controller.message.Command) */ {
 public:
  inline Command() : Command(nullptr) {};
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cam_controller.message.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 3,
    kCommandTypeFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kCommandIdFieldNumber = 1,
  };
  // repeated string parameters = 3;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  const std::string& parameters(int index) const;
  std::string* mutable_parameters(int index);
  void set_parameters(int index, const std::string& value);
  void set_parameters(int index, std::string&& value);
  void set_parameters(int index, const char* value);
  void set_parameters(int index, const char* value, size_t size);
  std::string* add_parameters();
  void add_parameters(const std::string& value);
  void add_parameters(std::string&& value);
  void add_parameters(const char* value);
  void add_parameters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parameters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parameters();
  private:
  const std::string& _internal_parameters(int index) const;
  std::string* _internal_add_parameters();
  public:

  // string command_type = 2;
  void clear_command_type();
  const std::string& command_type() const;
  void set_command_type(const std::string& value);
  void set_command_type(std::string&& value);
  void set_command_type(const char* value);
  void set_command_type(const char* value, size_t size);
  std::string* mutable_command_type();
  std::string* release_command_type();
  void set_allocated_command_type(std::string* command_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command_type(
      std::string* command_type);
  private:
  const std::string& _internal_command_type() const;
  void _internal_set_command_type(const std::string& value);
  std::string* _internal_mutable_command_type();
  public:

  // .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // int32 command_id = 1;
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::int32 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cam_controller.message.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_type_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 command_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// int32 command_id = 1;
inline void Command::clear_command_id() {
  command_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::command_id() const {
  // @@protoc_insertion_point(field_get:cam_controller.message.Command.command_id)
  return _internal_command_id();
}
inline void Command::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  command_id_ = value;
}
inline void Command::set_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:cam_controller.message.Command.command_id)
}

// string command_type = 2;
inline void Command::clear_command_type() {
  command_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Command::command_type() const {
  // @@protoc_insertion_point(field_get:cam_controller.message.Command.command_type)
  return _internal_command_type();
}
inline void Command::set_command_type(const std::string& value) {
  _internal_set_command_type(value);
  // @@protoc_insertion_point(field_set:cam_controller.message.Command.command_type)
}
inline std::string* Command::mutable_command_type() {
  // @@protoc_insertion_point(field_mutable:cam_controller.message.Command.command_type)
  return _internal_mutable_command_type();
}
inline const std::string& Command::_internal_command_type() const {
  return command_type_.Get();
}
inline void Command::_internal_set_command_type(const std::string& value) {
  
  command_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Command::set_command_type(std::string&& value) {
  
  command_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cam_controller.message.Command.command_type)
}
inline void Command::set_command_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cam_controller.message.Command.command_type)
}
inline void Command::set_command_type(const char* value,
    size_t size) {
  
  command_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cam_controller.message.Command.command_type)
}
inline std::string* Command::_internal_mutable_command_type() {
  
  return command_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Command::release_command_type() {
  // @@protoc_insertion_point(field_release:cam_controller.message.Command.command_type)
  return command_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Command::set_allocated_command_type(std::string* command_type) {
  if (command_type != nullptr) {
    
  } else {
    
  }
  command_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cam_controller.message.Command.command_type)
}
inline std::string* Command::unsafe_arena_release_command_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cam_controller.message.Command.command_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return command_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Command::unsafe_arena_set_allocated_command_type(
    std::string* command_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command_type != nullptr) {
    
  } else {
    
  }
  command_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cam_controller.message.Command.command_type)
}

// repeated string parameters = 3;
inline int Command::_internal_parameters_size() const {
  return parameters_.size();
}
inline int Command::parameters_size() const {
  return _internal_parameters_size();
}
inline void Command::clear_parameters() {
  parameters_.Clear();
}
inline std::string* Command::add_parameters() {
  // @@protoc_insertion_point(field_add_mutable:cam_controller.message.Command.parameters)
  return _internal_add_parameters();
}
inline const std::string& Command::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const std::string& Command::parameters(int index) const {
  // @@protoc_insertion_point(field_get:cam_controller.message.Command.parameters)
  return _internal_parameters(index);
}
inline std::string* Command::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:cam_controller.message.Command.parameters)
  return parameters_.Mutable(index);
}
inline void Command::set_parameters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cam_controller.message.Command.parameters)
  parameters_.Mutable(index)->assign(value);
}
inline void Command::set_parameters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cam_controller.message.Command.parameters)
  parameters_.Mutable(index)->assign(std::move(value));
}
inline void Command::set_parameters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parameters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cam_controller.message.Command.parameters)
}
inline void Command::set_parameters(int index, const char* value, size_t size) {
  parameters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cam_controller.message.Command.parameters)
}
inline std::string* Command::_internal_add_parameters() {
  return parameters_.Add();
}
inline void Command::add_parameters(const std::string& value) {
  parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cam_controller.message.Command.parameters)
}
inline void Command::add_parameters(std::string&& value) {
  parameters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cam_controller.message.Command.parameters)
}
inline void Command::add_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cam_controller.message.Command.parameters)
}
inline void Command::add_parameters(const char* value, size_t size) {
  parameters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cam_controller.message.Command.parameters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command::parameters() const {
  // @@protoc_insertion_point(field_list:cam_controller.message.Command.parameters)
  return parameters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:cam_controller.message.Command.parameters)
  return &parameters_;
}

// .google.protobuf.Timestamp timestamp = 4;
inline bool Command::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Command::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Command::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Command::timestamp() const {
  // @@protoc_insertion_point(field_get:cam_controller.message.Command.timestamp)
  return _internal_timestamp();
}
inline void Command::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cam_controller.message.Command.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Command::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Command::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:cam_controller.message.Command.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Command::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Command::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:cam_controller.message.Command.timestamp)
  return _internal_mutable_timestamp();
}
inline void Command::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:cam_controller.message.Command.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace cam_controller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_command_2eproto
