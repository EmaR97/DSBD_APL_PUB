version: '3.9'


services: #docker compose build

  server_processing: #docker compose up --build server_processing
    deploy:
      mode: replicated
      replicas: 3
    build:
      context: .
      dockerfile: docker/Dockerfile_server_processing
      target: dev
    image: quay.io/emar97/server_processing_image
    depends_on:
      - kafka
      - minio
    networks:
      - backend
    volumes:
      - ./docker/config/config_ps.json:/usr/src/app/build/config_ps.json:ro

  server_main: #docker compose up --build server_main
    build:
      context: .
      dockerfile: docker/Dockerfile_GO
      target: main_server
    image: quay.io/emar97/server_main_image
    depends_on:
      - mongodb
      - kafka
      - server_auth
      - minio
    networks:
      - backend
    ports:
      - "50051:50051"
      - "8082:8080"
    volumes:
      - ./docker/config/config_main.json:/app/config.json:ro

  server_command: #docker compose up --build server_command
    build:
      context: .
      dockerfile: docker/Dockerfile_GO
      target: command_server
    image: quay.io/emar97/server_command_image
    depends_on:
      - server_auth
      - rabbitmq
    networks:
      - backend
    ports:
      - "8081:8080"
    volumes:
      - ./docker/config/config_command.json:/app/config.json:ro

  server_auth: #docker compose up --build server_auth
    build:
      context: .
      dockerfile: docker/Dockerfile_GO
      target: auth_server
    image: quay.io/emar97/server_auth_image
    depends_on:
      - mongodb
    networks:
      - backend
    ports:
      - "8080:8080"
    environment:
      - CONFIG_FILE=/app/config.json
    volumes:
      - ./docker/config/config_auth.json:/app/config.json:ro

  notification_bot: #docker compose up --build notification_bot
    build:
      context: .
      dockerfile: docker/Dockerfile_python
      target: notification_bot
    image: quay.io/emar97/notification_bot_image
    depends_on:
      - kafka
      - conversation_bot
    networks:
      - backend
    volumes:
      - ./docker/config/config_notification_bot.json:/app/config.json:ro

  conversation_bot: #docker compose up --build conversation_bot
    build:
      context: .
      dockerfile: docker/Dockerfile_python
      target: conversation_bot
    image: quay.io/emar97/conversation_bot_image
    depends_on:
      - mongodb
      - server_auth
      - server_main
    networks:
      - backend
    volumes:
      - ./docker/config/config_conversation_bot.json:/app/config.json:ro


  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - backend

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 3
        window: 120s
    ports:
      - "29092:29092"
      - "9092:9092"
      - "5085:5085"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      JMX_PORT: 9999
      KAFKA_OPTS: "-javaagent:/opt/prometheus-jmx-exporter/jmx_prometheus_javaagent-0.18.0.jar=5085:/opt/prometheus-jmx-exporter/kafka.yml"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost -Dcom.sun.management.jmxremote.host=localhost -Dcom.sun.management.jmxremote.port=5084 -Dcom.sun.management.jmxremote.rmi.port=5084 -Dcom.sun.management.jmxremote.local.only=false"
    volumes:
      - ./docker/kafka/jmx_prometheus_javaagent-0.18.0.jar:/opt/prometheus-jmx-exporter/jmx_prometheus_javaagent-0.18.0.jar
      - ./docker/kafka/kafka.yml:/opt/prometheus-jmx-exporter/kafka.yml
      - ./docker/kafka/server.properties:/server.properties:/etc/kafka/server.properties
    networks:
      - backend

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      - kafka
    networks:
      - backend

  # RabbitMQ
  rabbitmq:
    image: "rabbitmq:latest"
    ports:
      - "5672:5672"  # RabbitMQ
      - "15672:15672"  # RabbitMQ Management Console
      - "1884:1883"  # MQTT
    environment:
      RABBITMQ_ERLANG_COOKIE: "secretcookie"
      RABBITMQ_DEFAULT_USER: "your_rabbitmq_id"
      RABBITMQ_DEFAULT_PASS: "your_rabbitmq_secret"
    command: >
      sh -c "
        rabbitmq-plugins enable rabbitmq_mqtt &&
        rabbitmq-plugins enable rabbitmq_management &&
        exec rabbitmq-server 
      "
    networks:
      - backend

  # MongoDB
  mongodb:
    image: mongo:7.0.3
    environment:
      MONGO_INITDB_ROOT_USERNAME: your_mongo_id
      MONGO_INITDB_ROOT_PASSWORD: your_mongo_secret
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend

  # Minio
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: your_minio_id
      MINIO_ROOT_PASSWORD: your_minio_secret
      MINIO_ROOT_URL: http://your-bucket-secure.minio:9000  # Explicitly set the root URL

    volumes:
      - data:/data
    command: server /data --console-address 0.0.0.0:9001
    networks:
      - backend

  # Nginx
  nginx:
    image: nginx:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 3
        window: 120s
    ports:
      - "8090:8090"
    depends_on:
      - server_main
      - server_command
      - server_auth
    networks:
      - backend
    volumes:
      - ./docker/nginx/routing.conf:/etc/nginx/nginx.conf

volumes:
  mongo_data:
  data:

networks:
  backend:
